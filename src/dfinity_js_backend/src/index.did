service: () -> {
    createPharmaceutical: (record {manufacturer:text; expiryDate:nat64; userId:text; name:text; batchNumber:text}) -> (variant {Ok:record {id:text; manufacturer:text; expiryDate:nat64; userId:text; name:text; batchNumber:text}; Err:variant {InvalidPayload:text; NotFound:text; ValidationError:text; Unauthorized:text; TemperatureExcursion:text}});
    createReward: (record {participantId:text; rewardType:variant {RecallManagement; QualityReport; SupplyChainEvent; Other}; points:nat64}) -> (variant {Ok:record {id:text; participantId:text; rewardType:variant {RecallManagement; QualityReport; SupplyChainEvent; Other}; points:nat64}; Err:variant {InvalidPayload:text; NotFound:text; ValidationError:text; Unauthorized:text; TemperatureExcursion:text}});
    createSupplyChainEvent: (record {pharmaceuticalId:text; participantId:text; location:text; eventType:variant {Storage; QualityControl; Production; Delivery; Packaging; Transportation; RecallInitiated; TemperatureExcursion}}) -> (variant {Ok:record {id:text; pharmaceuticalId:text; date:nat64; participantId:text; location:text; eventType:variant {Storage; QualityControl; Production; Delivery; Packaging; Transportation; RecallInitiated; TemperatureExcursion}}; Err:variant {InvalidPayload:text; NotFound:text; ValidationError:text; Unauthorized:text; TemperatureExcursion:text}});
    createUser: (record {username:text; role:variant {Distributor; Viewer; Admin; Manufacturer}}) -> (variant {Ok:record {id:text; username:text; role:variant {Distributor; Viewer; Admin; Manufacturer}; points:nat64}; Err:variant {InvalidPayload:text; NotFound:text; ValidationError:text; Unauthorized:text; TemperatureExcursion:text}});
    getActiveRecalls: () -> (variant {Ok:vec record {id:text; initiatedDate:nat64; status:text; pharmaceuticalId:text; severity:text; initiatedBy:text; affectedBatches:vec text; reason:text}; Err:variant {InvalidPayload:text; NotFound:text; ValidationError:text; Unauthorized:text; TemperatureExcursion:text}}) query;
    getAllPharmaceuticals: () -> (variant {Ok:vec record {id:text; manufacturer:text; expiryDate:nat64; userId:text; name:text; batchNumber:text}; Err:variant {InvalidPayload:text; NotFound:text; ValidationError:text; Unauthorized:text; TemperatureExcursion:text}}) query;
    getAllRewards: () -> (variant {Ok:vec record {id:text; participantId:text; rewardType:variant {RecallManagement; QualityReport; SupplyChainEvent; Other}; points:nat64}; Err:variant {InvalidPayload:text; NotFound:text; ValidationError:text; Unauthorized:text; TemperatureExcursion:text}}) query;
    getAllSupplyChainEvents: () -> (variant {Ok:vec record {id:text; pharmaceuticalId:text; date:nat64; participantId:text; location:text; eventType:variant {Storage; QualityControl; Production; Delivery; Packaging; Transportation; RecallInitiated; TemperatureExcursion}}; Err:variant {InvalidPayload:text; NotFound:text; ValidationError:text; Unauthorized:text; TemperatureExcursion:text}}) query;
    getPharmaceuticalHistory: (text) -> (variant {Ok:vec record {id:text; pharmaceuticalId:text; date:nat64; participantId:text; location:text; eventType:variant {Storage; QualityControl; Production; Delivery; Packaging; Transportation; RecallInitiated; TemperatureExcursion}}; Err:variant {InvalidPayload:text; NotFound:text; ValidationError:text; Unauthorized:text; TemperatureExcursion:text}}) query;
    getQualityMetrics: (text) -> (variant {Ok:record {averageTemperature:nat64; passRate:nat64; totalChecks:nat64; averageHumidity:nat64}; Err:variant {InvalidPayload:text; NotFound:text; ValidationError:text; Unauthorized:text; TemperatureExcursion:text}}) query;
    getTemperatureExcursions: (text) -> (variant {Ok:vec record {id:text; pharmaceuticalId:text; temperature:nat64; timestamp:nat64; isExcursion:bool; location:text}; Err:variant {InvalidPayload:text; NotFound:text; ValidationError:text; Unauthorized:text; TemperatureExcursion:text}}) query;
    getUserById: (text) -> (variant {Ok:record {id:text; username:text; role:variant {Distributor; Viewer; Admin; Manufacturer}; points:nat64}; Err:variant {InvalidPayload:text; NotFound:text; ValidationError:text; Unauthorized:text; TemperatureExcursion:text}}) query;
    getUsersByRole: (variant {Distributor; Viewer; Admin; Manufacturer}) -> (variant {Ok:vec record {id:text; username:text; role:variant {Distributor; Viewer; Admin; Manufacturer}; points:nat64}; Err:variant {InvalidPayload:text; NotFound:text; ValidationError:text; Unauthorized:text; TemperatureExcursion:text}}) query;
    initiateRecall: (record {pharmaceuticalId:text; severity:text; initiatedBy:text; affectedBatches:vec text; reason:text}) -> (variant {Ok:record {id:text; initiatedDate:nat64; status:text; pharmaceuticalId:text; severity:text; initiatedBy:text; affectedBatches:vec text; reason:text}; Err:variant {InvalidPayload:text; NotFound:text; ValidationError:text; Unauthorized:text; TemperatureExcursion:text}});
    logTemperature: (record {pharmaceuticalId:text; temperature:nat64; location:text}) -> (variant {Ok:record {id:text; pharmaceuticalId:text; temperature:nat64; timestamp:nat64; isExcursion:bool; location:text}; Err:variant {InvalidPayload:text; NotFound:text; ValidationError:text; Unauthorized:text; TemperatureExcursion:text}});
    submitQualityCheck: (record {pharmaceuticalId:text; temperature:nat64; inspectorId:text; humidity:nat64; notes:text; passed:bool}) -> (variant {Ok:record {id:text; pharmaceuticalId:text; temperature:nat64; inspectorId:text; humidity:nat64; notes:text; timestamp:nat64; passed:bool}; Err:variant {InvalidPayload:text; NotFound:text; ValidationError:text; Unauthorized:text; TemperatureExcursion:text}});
}
